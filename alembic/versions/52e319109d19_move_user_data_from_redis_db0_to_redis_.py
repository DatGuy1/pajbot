"""Move user data from redis db0 to redis db3

Revision ID: 52e319109d19
Revises: 04d2b415fcc5
Create Date: 2016-10-21 09:23:36.297577

"""

# revision identifiers, used by Alembic.
revision = '52e319109d19'
down_revision = '04d2b415fcc5'
branch_labels = None
depends_on = None

import argparse
import json
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm import relationship

from pajbot.utils import load_config
from pajbot.managers.redis import RedisManager

Session = sessionmaker()

Base = declarative_base()

tag = context.get_tag_argument()

parser = argparse.ArgumentParser()
parser.add_argument('--config', '-c',
                    default='config.ini',
                    help='Specify which config file to use '
                            '(default: config.ini)')
custom_args = None
if tag is not None:
    custom_args = tag.replace('"', '').split()
args, unknown = parser.parse_known_args(args=custom_args)

pb_config = load_config(args.config)

redis_options = {}
if 'redis' in pb_config:
    redis_options = pb_config._sections['redis']

RedisManager.init(**redis_options)


def upgrade():
    streamer = pb_config['main']['streamer']

    # Connect to DB 0
    extra_options = redis_options
    extra_options['db'] = 0
    RedisManager.init(**extra_options)

    users = {}

    redis = RedisManager.get()

    data = redis.hgetall('{streamer}:users:banned'.format(streamer=streamer))
    for username in data:
        value = data[username]
        if username not in users:
            users[username] = {}
        users[username]['banned'] = True

    data = redis.hgetall('{streamer}:users:ignored'.format(streamer=streamer))
    for username in data:
        value = data[username]
        if username not in users:
            users[username] = {}
        users[username]['ignored'] = True

    data = redis.hgetall('{streamer}:users:last_active'.format(streamer=streamer))
    for username in data:
        value = data[username]
        if username not in users:
            users[username] = {}
        users[username]['last_active'] = value

    data = redis.hgetall('{streamer}:users:last_seen'.format(streamer=streamer))
    for username in data:
        value = data[username]
        if username not in users:
            users[username] = {}
        users[username]['last_seen'] = value

    data = redis.zrange('{streamer}:users:num_lines'.format(streamer=streamer), 0, -1, withscores=True)
    for d in data:
        username, value = d
        if username not in users:
            users[username] = {}
        users[username]['num_lines'] = value

    # Connect to DB 3
    extra_options = redis_options
    extra_options['db'] = 3
    RedisManager.init(**extra_options)

    redis = RedisManager.get()

    for username in users:
        userdata = users[username]
        jsondata = {}
        if 'banned' in userdata:
            jsondata['Banned'] = True
        if 'ignored' in userdata:
            jsondata['Ignored'] = True
        if 'last_active' in userdata:
            jsondata['LastActive'] = int(float(userdata['last_active']))
        if 'last_seen' in userdata:
            jsondata['LastSeen'] = int(float(userdata['last_seen']))
        if len(jsondata) > 0:
            redis.hset('{streamer}:users'.format(streamer=streamer), username, json.dumps(jsondata, separators=(',', ':')))

        if 'num_lines' in userdata:
            redis.zadd('{streamer}:users:total_message_count'.format(streamer=streamer), username, userdata['num_lines'])
            redis.zadd('{streamer}:users:offline_message_count'.format(streamer=streamer), username, userdata['num_lines'])

    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###
