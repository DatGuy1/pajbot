"""Move points to redis db3

Revision ID: 04d2b415fcc5
Revises: 8feba263d722
Create Date: 2016-10-03 18:25:05.220245

"""

# revision identifiers, used by Alembic.
revision = '04d2b415fcc5'
down_revision = '8feba263d722'
branch_labels = None
depends_on = None

import argparse
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm import relationship

from pajbot.utils import load_config
from pajbot.managers.redis import RedisManager

Session = sessionmaker()

Base = declarative_base()

tag = context.get_tag_argument()

parser = argparse.ArgumentParser()
parser.add_argument('--config', '-c',
                    default='config.ini',
                    help='Specify which config file to use '
                            '(default: config.ini)')
custom_args = None
if tag is not None:
    custom_args = tag.replace('"', '').split()
args, unknown = parser.parse_known_args(args=custom_args)

pb_config = load_config(args.config)

redis_options = {}
if 'redis' in pb_config:
    redis_options = pb_config._sections['redis']

RedisManager.init(**redis_options)


class User(Base):
    __tablename__ = 'tb_user'

    id = sa.Column(sa.Integer, primary_key=True)
    username = sa.Column(sa.String(32), nullable=False, index=True, unique=True)
    username_raw = sa.Column(sa.String(32))
    level = sa.Column(sa.Integer, nullable=False, default=100)
    points = sa.Column(sa.Integer, nullable=False, default=0, index=True)
    subscriber = sa.Column(sa.Boolean, nullable=False, default=False)
    minutes_in_chat_online = sa.Column(sa.Integer, nullable=False, default=0)
    minutes_in_chat_offline = sa.Column(sa.Integer, nullable=False, default=0)


def upgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    streamer = pb_config['main']['streamer']
    points_key = '{streamer}:users:points'.format(streamer=streamer)

    with RedisManager.pipeline_context() as pipeline:
        pipeline.delete(points_key)

    for user in session.query(User):
        if user.points > 0:
            with RedisManager.pipeline_context() as pipeline:
                pipeline.zadd(points_key, user.username, user.points)

    session.commit()
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###
